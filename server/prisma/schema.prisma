// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  role      Role      @default(BUYER)
  Product   Product[]
  cartItems CartItem[]
  orders    Order[]

  reviews   Review[]
}


enum Category {
  Laptops
  Phones
  Accessories
  Monitors
  Audio
  Other
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String
  price       Int
  createdAt   DateTime @default(now())
  seller      User?    @relation(fields: [sellerId], references: [id])
  image       String
  sellerId    String?
  cartItems   CartItem[]
  orderItems  OrderItem[]
  category    Category @default(Other)

  reviews        Review[]
  averageRating  Float   @default(0)
  reviewsCount   Int     @default(0)
}


enum Role {
  BUYER
  SELLER
  ADMIN
}

model CartItem {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int

  user    User    @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}


enum OrderStatus {
  PENDING
  PAID
  CANCELLED
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order   Order   @relation(fields: [orderId], references: [id])
}


model Order {
  id  String  @id @default(cuid())
  userId  String
  total Int?
  status  OrderStatus @default(PENDING)
  createdAt DateTime @default(now())
  user  User @relation(fields: [userId], references: [id])
  items OrderItem[]

  fullName    String
  address     String
  city        String
  postalCode  String
  country     String
  phone       String
}

model Review {
  id         String   @id @default(cuid())
  productId  String
  userId     String
  rating     Int
  comment    String?        // optional
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  // one review per user per product
  @@unique([userId, productId])
}
